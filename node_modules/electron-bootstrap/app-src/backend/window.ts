import { BrowserWindow } from "electron";
import * as path from "path";
import * as url from "url";
import * as isElectronInDevEnvironment from "electron-is-dev";
import { ipcMain } from "electron";
import * as marked from "marked";
import * as fs from "fs";

export default class Window
{
    private window: Electron.BrowserWindow;

    public constructor(
        private width: number = 800,
        private height: number = 600
    ) {}

    public init(): void
    {
        this.initWindow();
        this.attachEventHandlers();
        this.enableDevelopmentTools();
        this.loadIndexPage();
        Window.attachListeners();
    }

    private static attachListeners(): void
    {
        ipcMain.on("ready", (event: any, isReady: boolean): void => {
            event.sender.send("app:name", "Electron Bootstrap");
            let instructions: string = marked(
                fs.readFileSync("readme.md", { encoding: "utf8" }),
                { smartypants: true }
            );
            event.sender.send("app:instructions", instructions);
        });
    }

    private initWindow(): void
    {
        this.window = new BrowserWindow({
            width: this.width,
            height: this.height
        });
    }

    private enableDevelopmentTools(): void
    {
        if (isElectronInDevEnvironment === true) {
            let isDevTronInstalled: boolean = BrowserWindow.getDevToolsExtensions().hasOwnProperty("devtron");
            if (isDevTronInstalled === false) {
                BrowserWindow.addDevToolsExtension("node_modules/devtron");
            }
            this.window.webContents.openDevTools({ mode: "right" });
        }
    }

    private loadIndexPage(): void
    {
        this.window.loadURL(url.format({
            pathname: path.join(__dirname, "../index.html"),
            protocol: "file:",
            slashes: true
        }));
    }

    private attachEventHandlers(): void
    {
        this.window.on("closed", () => {
            delete this.window;
        });
    }
}